{"version":3,"sources":["components/CommentInput.js","reducers/comments.js","containers/CommentInput.js","components/Comment.js","components/CommentList.js","containers/CommentList.js","containers/CommentApp.js","index.js"],"names":["CommentInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","content","textarea","focus","event","onUserNameInputBlur","target","value","setState","onSubmit","createdTime","Date","_this2","react_default","a","createElement","className","onBlur","handleUsernameBlur","bind","onChange","handleUsernameChange","ref","handleContentChange","onClick","handleSubmit","Component","defaultProps","CommentInputContainer","_loadUsername","localStorage","getItem","setItem","comment","alert","comments","newComments","concat","toConsumableArray","JSON","stringify","CommentInput_CommentInput","_saveUsername","handleSubmitComment","connect","dispatch","type","addComment","Comment","timeString","_updateTimeString","_timer","setInterval","duration","now","Math","round","max","onDeleteComment","index","clearInterval","replace","dangerouslySetInnerHTML","__html","_getProcessedContent","handleDeleteComment","CommentList","map","i","components_Comment","key","CommentListContainer","_loadComments","parse","initComments","slice","components_CommentList","commentIndex","deleteComment","CommentApp","containers_CommentInput","containers_CommentList","store","createStore","action","ReactDOM","render","es","CommentApp_CommentApp","document","getElementById"],"mappings":"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","file":"static/js/main.56ca4ab5.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class CommentInput extends Component {\r\n  static propTypes = {\r\n    username: PropTypes.any,\r\n    onSubmit: PropTypes.func,\r\n    onUserNameInputBlur: PropTypes.func\r\n  }\r\n\r\n  static defaultProps = {\r\n    username: ''\r\n  }\r\n\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      username: props.username, // 从 props 上取 username 字段\r\n      content: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.textarea.focus()\r\n  }\r\n\r\n  handleUsernameBlur (event) {\r\n    if (this.props.onUserNameInputBlur) {\r\n      this.props.onUserNameInputBlur(event.target.value)\r\n    }\r\n  }\r\n\r\n  handleUsernameChange (event) {\r\n    this.setState({\r\n      username: event.target.value\r\n    })\r\n  }\r\n\r\n  handleContentChange (event) {\r\n    this.setState({\r\n      content: event.target.value\r\n    })\r\n  }\r\n\r\n  handleSubmit () {\r\n    if (this.props.onSubmit) {\r\n      this.props.onSubmit({\r\n        username: this.state.username,\r\n        content: this.state.content,\r\n        createdTime: +new Date()\r\n      })\r\n    }\r\n    this.setState({ content: '' })\r\n  }\r\n    render(){\r\n        return (\r\n            <div className=\"comment-input\">\r\n                <div className=\"comment-field\">\r\n                    <span className=\"comment-field-name\">用户名 :</span> \r\n                    <div className=\"comment-field-input\">\r\n                        <input \r\n                        onBlur={this.handleUsernameBlur.bind(this)}\r\n                        value={this.state.username}\r\n                        onChange={this.handleUsernameChange.bind(this)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"comment-field\">\r\n                    <span className=\"comment-field-name\">评论内容 :</span>\r\n                    <div className=\"comment-field-input\">\r\n                        <textarea  \r\n                        ref={(textarea)=>this.textarea=textarea}\r\n                        value={this.state.content}\r\n                        onChange={this.handleContentChange.bind(this)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"comment-field-button\">\r\n                    <button \r\n                    onClick={this.handleSubmit.bind(this)}\r\n                    >\r\n                        发布\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","// action types\r\nconst INIT_COMMENTS = 'INIT_COMMENTS'\r\nconst ADD_COMMENT = 'ADD_COMMENT'\r\nconst DELETE_COMMENT = 'DELETE_COMMENT'\r\n\r\n// reducer\r\nexport default function (state, action) {\r\n  if (!state) {\r\n    state = { comments: [] }\r\n  }\r\n  switch (action.type) {\r\n    case INIT_COMMENTS:\r\n      // 初始化评论\r\n      return { comments: action.comments }\r\n    case ADD_COMMENT:\r\n      // 新增评论\r\n      return {\r\n        comments: [...state.comments, action.comment]\r\n      }\r\n    case DELETE_COMMENT:\r\n      // 删除评论\r\n      return {\r\n        comments: [\r\n          ...state.comments.slice(0, action.commentIndex),\r\n          ...state.comments.slice(action.commentIndex + 1)\r\n        ]\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// action creators\r\nexport const initComments = (comments) => {\r\n  return { type: INIT_COMMENTS, comments }\r\n}\r\n\r\nexport const addComment = (comment) => {\r\n  return { type: ADD_COMMENT, comment }\r\n}\r\n\r\nexport const deleteComment = (commentIndex) => {\r\n  return { type: DELETE_COMMENT, commentIndex }\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport CommentInput from '../components/CommentInput'\r\nimport { addComment } from '../reducers/comments'\r\n\r\n// CommentInputContainer\r\n// 负责用户名的加载、保存，评论的发布\r\nclass CommentInputContainer extends Component {\r\n  static propTypes = {\r\n    comments: PropTypes.array,\r\n    onSubmit: PropTypes.func\r\n  }\r\n\r\n  constructor () {\r\n    super()\r\n    this.state = { username: '' }\r\n  }\r\n\r\n  componentWillMount () {\r\n    // componentWillMount 生命周期中初始化用户名\r\n    this._loadUsername()\r\n  }\r\n\r\n  _loadUsername () {\r\n    // 从 LocalStorage 加载 username\r\n    // 然后可以在 render 方法中传给 CommentInput\r\n    const username = localStorage.getItem('username')\r\n    if (username) {\r\n      this.setState({ username })\r\n    }\r\n  }\r\n\r\n  _saveUsername (username) {\r\n    // 看看 render 方法的 onUserNameInputBlur\r\n    // 这个方法会在用户名输入框 blur 的时候的被调用，保存用户名\r\n    localStorage.setItem('username', username)\r\n  }\r\n\r\n  handleSubmitComment (comment) {\r\n    // 评论数据的验证\r\n    if (!comment) return\r\n    if (!comment.username) return alert('请输入用户名')\r\n    if (!comment.content) return alert('请输入评论内容')\r\n    // 新增评论保存到 LocalStorage 中\r\n    const { comments } = this.props\r\n    const newComments = [...comments, comment]\r\n    localStorage.setItem('comments', JSON.stringify(newComments))\r\n    // this.props.onSubmit 是 connect 传进来的\r\n    // 会 dispatch 一个 action 去新增评论\r\n    if (this.props.onSubmit) {\r\n      this.props.onSubmit(comment)\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <CommentInput\r\n        username={this.state.username}\r\n        onUserNameInputBlur={this._saveUsername.bind(this)}\r\n        onSubmit={this.handleSubmitComment.bind(this)} />\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    comments: state.comments\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSubmit: (comment) => {\r\n      dispatch(addComment(comment))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CommentInputContainer)","import React,{Component} from 'react'\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nclass Comment extends Component{\r\n    static propTypes={\r\n        comment:PropTypes.object.isRequired,\r\n        index:PropTypes.number,\r\n        onDeleteComments:PropTypes.func\r\n    }\r\n\r\n    constructor(){\r\n        super()\r\n        this.state={timeString:''}\r\n    }\r\n    componentWillMount(){\r\n        this._updateTimeString()\r\n        this._timer=setInterval(\r\n            this._updateTimeString.bind(this),\r\n            1000\r\n        )\r\n    }\r\n    _updateTimeString(){\r\n        const comment = this.props.comment\r\n        const duration = (+Date.now() - comment.createdTime)/1000\r\n        this.setState({\r\n            timeString:duration>60\r\n            ?`${Math.round(duration/60)} 分钟前`\r\n            :`${Math.round(Math.max(duration,1))} 秒前`\r\n        })\r\n    }\r\n    handleDeleteComment(){\r\n        if(this.props.onDeleteComment){\r\n            this.props.onDeleteComment(this.props.index)\r\n        }\r\n    }\r\n    componentWillUnmount(){\r\n        clearInterval(this._timer)\r\n    }\r\n    _getProcessedContent(content){\r\n        return content\r\n        .replace(/&/g, \"&amp;\")\r\n        .replace(/</g, \"&lt;\")\r\n        .replace(/>/g, \"&gt;\")\r\n        .replace(/\"/g, \"&quot;\")\r\n        .replace(/'/g, \"&#039;\")\r\n        .replace(/`([\\S\\s]+?)`/g, '<code>$1</code>')\r\n    }\r\n    render(){\r\n        const {comment} = this.props\r\n        return (\r\n            <div className='comment'>\r\n                <div className=\"comment-user\">\r\n                    <span className=\"comment-username\">\r\n                    {comment.username}\r\n                    </span>\r\n                     <b>:</b>  \r\n                </div>\r\n                <p dangerouslySetInnerHTML={{\r\n                    __html:this._getProcessedContent(comment.content)\r\n                }} />\r\n                <span className='comment-createdtime'>\r\n                    {this.state.timeString}\r\n                </span>\r\n                <span \r\n                onClick={this.handleDeleteComment.bind(this)}\r\n                className='comment-delete'>\r\n                    删除\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Comment","import React,{Component} from 'react'\r\nimport Comment from './Comment'\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nclass CommentList extends Component{\r\n    static propTypes = {\r\n        onDeleteComment:PropTypes.func,\r\n        comments:PropTypes.array\r\n    }\r\n    static defaultProps={\r\n        comments:[]\r\n    }\r\n    handleDeleteComment(index){\r\n        if(this.props.onDeleteComment){\r\n            this.props.onDeleteComment(index)\r\n        }\r\n    }\r\n    render(){\r\n\r\n        return (\r\n            <div>\r\n                {this.props.comments.map((comment,i)=>\r\n                <Comment \r\n                onDeleteComment={this.handleDeleteComment.bind(this)}\r\n                key={i}\r\n                index={i}\r\n                 comment={comment}\r\n                 />)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CommentList","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport CommentList from '../components/CommentList'\r\nimport { initComments, deleteComment } from '../reducers/comments'\r\n\r\n// CommentListContainer\r\n// 一个 Smart 组件，负责评论列表数据的加载、初始化、删除评论\r\n// 沟通 CommentList 和 state\r\nclass CommentListContainer extends Component {\r\n  static propTypes = {\r\n    comments: PropTypes.array,\r\n    initComments: PropTypes.func,\r\n    onDeleteComment: PropTypes.func\r\n  }\r\n\r\n  componentWillMount () {\r\n    // componentWillMount 生命周期中初始化评论\r\n    this._loadComments()\r\n  }\r\n\r\n  _loadComments () {\r\n    // 从 LocalStorage 中加载评论\r\n    let comments = localStorage.getItem('comments')\r\n    comments = comments ? JSON.parse(comments) : []\r\n    // this.props.initComments 是 connect 传进来的\r\n    // 可以帮我们把数据初始化到 state 里面去\r\n    this.props.initComments(comments)\r\n  }\r\n\r\n  handleDeleteComment (index) {\r\n    const { comments } = this.props\r\n    // props 是不能变的，所以这里新建一个删除了特定下标的评论列表\r\n    const newComments = [\r\n      ...comments.slice(0, index),\r\n      ...comments.slice(index + 1)\r\n    ]\r\n    // 保存最新的评论列表到 LocalStorage\r\n    localStorage.setItem('comments', JSON.stringify(newComments))\r\n    if (this.props.onDeleteComment) {\r\n      // this.props.onDeleteComment 是 connect 传进来的\r\n      // 会 dispatch 一个 action 去删除评论\r\n      this.props.onDeleteComment(index)\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <CommentList\r\n        comments={this.props.comments}\r\n        onDeleteComment={this.handleDeleteComment.bind(this)} />\r\n    )\r\n  }\r\n}\r\n\r\n// 评论列表从 state.comments 中获取\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    comments: state.comments\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // 提供给 CommentListContainer\r\n    // 当从 LocalStorage 加载评论列表以后就会通过这个方法\r\n    // 把评论列表初始化到 state 当中\r\n    initComments: (comments) => {\r\n      dispatch(initComments(comments))\r\n    },\r\n    // 删除评论\r\n    onDeleteComment: (commentIndex) => {\r\n      dispatch(deleteComment(commentIndex))\r\n    }\r\n  }\r\n}\r\n\r\n// 将 CommentListContainer connect 到 store\r\n// 会把 comments、initComments、onDeleteComment 传给 CommentListContainer\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CommentListContainer)","import React, { Component } from 'react'\r\nimport CommentInput from './CommentInput'\r\nimport CommentList from './CommentList'\r\n\r\nexport default class CommentApp extends Component {\r\n  render() {\r\n    return (\r\n      <div className='wrapper'>\r\n        <CommentInput />\r\n        <CommentList />\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport CommentApp from './containers/CommentApp'\nimport commentsReducer from './reducers/comments'\nimport './index.css'\n\nconst store = createStore(commentsReducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <CommentApp />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}